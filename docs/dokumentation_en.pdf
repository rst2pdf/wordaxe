%PDF-1.3
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<< /F1 2 0 R
 /F2 3 0 R
 /F3 4 0 R
 /F4 11 0 R
 /F5 14 0 R
 /F6 15 0 R >>
endobj
2 0 obj
<< /BaseFont /Helvetica
 /Encoding /WinAnsiEncoding
 /Name /F1
 /Subtype /Type1
 /Type /Font >>
endobj
3 0 obj
<< /BaseFont /Times-Bold
 /Encoding /WinAnsiEncoding
 /Name /F2
 /Subtype /Type1
 /Type /Font >>
endobj
4 0 obj
<< /BaseFont /Times-Roman
 /Encoding /WinAnsiEncoding
 /Name /F3
 /Subtype /Type1
 /Type /Font >>
endobj
5 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://www.reportlab.org) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 217.42
 583.8098
 260.19
 595.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
6 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://deco-cow.sourceforge.net) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 266.57
 535.8098
 393.76
 547.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
7 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://sourceforge.net/project/showfiles.php?group_id=105867) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 418.74
 517.8098
 479.56
 529.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
8 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://hkn.eecs.berkeley.edu/~dyoo/pyHnj) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 196.03
 391.8098
 250.19
 403.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
9 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://www.reportlab.org) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 159.66
 379.8098
 252.43
 391.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
10 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://code.google.com/p/pyhyphen) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 286.59
 379.8098
 355.19
 391.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
11 0 obj
<< /BaseFont /Times-BoldItalic
 /Encoding /WinAnsiEncoding
 /Name /F4
 /Subtype /Type1
 /Type /Font >>
endobj
12 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://www.reportlab.org) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 225.47
 245.8098
 301.56
 257.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
13 0 obj
<< /Annots [ 5 0 R
 6 0 R
 7 0 R
 8 0 R
 9 0 R
 10 0 R
 12 0 R ]
 /Contents 25 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 24 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
14 0 obj
<< /BaseFont /Courier
 /Encoding /WinAnsiEncoding
 /Name /F5
 /Subtype /Type1
 /Type /Font >>
endobj
15 0 obj
<< /BaseFont /Times-Italic
 /Encoding /WinAnsiEncoding
 /Name /F6
 /Subtype /Type1
 /Type /Font >>
endobj
16 0 obj
<< /Contents 26 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 24 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
17 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://www.ads.tuwien.ac.at/research/SiSiSi/) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 93.27
 444.6098
 272.15
 456.6098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
18 0 obj
<< /Annots [ 17 0 R ]
 /Contents 27 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 24 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
19 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://pypi.python.org/pypi/PyHyphen/) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 409.06
 667.8098
 486.85
 679.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
20 0 obj
<< /A << /S /URI
 /Type /Action
 /URI (http://pypi.python.org/pypi/PyHyphen/) >>
 /Border [ 0
 0
 0 ]
 /Rect [ 78
 655.8098
 159.67
 667.8098 ]
 /Subtype /Link
 /Type /Annot >>
endobj
21 0 obj
<< /Annots [ 19 0 R
 20 0 R ]
 /Contents 28 0 R
 /MediaBox [ 0
 0
 595.2756
 841.8898 ]
 /Parent 24 0 R
 /Resources << /Font 1 0 R
 /ProcSet [ /PDF
 /Text
 /ImageB
 /ImageC
 /ImageI ] >>
 /Rotate 0
 /Trans <<  >>
 /Type /Page >>
endobj
22 0 obj
<< /Outlines 29 0 R
 /PageMode /UseNone
 /Pages 24 0 R
 /Type /Catalog >>
endobj
23 0 obj
<< /Author (Henning von Bargen)
 /CreationDate (D:20000101000000-01'00')
 /Keywords ()
 /Producer (ReportLab http://www.reportlab.com)
 /Subject (\(unspecified\))
 /Title (wordaxe User Guide \(english\)) >>
endobj
24 0 obj
<< /Count 4
 /Kids [ 13 0 R
 16 0 R
 18 0 R
 21 0 R ]
 /Type /Pages >>
endobj
25 0 obj
<< /Length 5110 >>
stream
1 0 0 1 0 0 cm BT /F1 12 Tf 14.4 TL ET
q
Q
q
1 0 0 1 78 741.8898 cm
q
BT 1 0 0 1 0 9.832 Tm 22 TL /F2 18 Tf 0 0 0 rg (wordaxe Hyphenation) Tj T* ET
Q
Q
q
1 0 0 1 78 723.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Henning von Bargen, 26 Oct 2008, Release 0.3.0) Tj T* ET
Q
Q
q
1 0 0 1 78 693.8898 cm
q
BT 1 0 0 1 0 8.536 Tm 18 TL /F2 14 Tf 0 0 0 rg (Overview) Tj T* ET
Q
Q
q
1 0 0 1 78 663.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The wordaxe library was formerly called "deco-cow", which is an abbreviation for "decomposition of com\255) Tj T* (pound words".) Tj T* ET
Q
Q
q
1 0 0 1 78 645.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The library consists of three program parts:) Tj T* ET
Q
Q
q
1 0 0 1 78 627.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (1\) an \(easily extendable\) class library adding hyphenation support to Python programs.) Tj T* ET
Q
Q
q
1 0 0 1 78 597.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (2\) a special hyphenation algorithm, based on the decomposition of compound words \(the implementation is) Tj T* (only for the German language\).) Tj T* ET
Q
Q
q
1 0 0 1 78 579.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (3\) a hyphenation extension for the ) Tj (ReportLab) Tj ( PDF library.) Tj T* ET
Q
Q
q
1 0 0 1 78 549.8898 cm
q
BT 1 0 0 1 0 8.536 Tm 18 TL /F2 14 Tf 0 0 0 rg (Where to get it) Tj T* ET
Q
Q
q
1 0 0 1 78 531.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The wordaxe library is hosted at SourceForge \() Tj (http://deco-cow.sourceforge.net) Tj (\).) Tj T* ET
Q
Q
q
1 0 0 1 78 501.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The current stable Release of the software can be downloaded from the SourceForge ) Tj (download page) Tj (. There's) Tj T* (also a subversion repository where you can get the current development code.) Tj T* ET
Q
Q
q
1 0 0 1 78 471.8898 cm
q
BT 1 0 0 1 0 8.536 Tm 18 TL /F2 14 Tf 0 0 0 rg (Licence) Tj T* ET
Q
Q
q
1 0 0 1 78 441.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The wordaxe hyphenation library is dual-licensed. You are permitted to use and distribute wordaxe under one) Tj T* (of these open source licenses:) Tj T* ET
Q
Q
q
1 0 0 1 78 423.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg ("Apache 2.0 License" or "2-Clauses BSD-License".) Tj T* ET
Q
Q
q
1 0 0 1 78 405.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (For details, see the file license.txt contained in the library.) Tj T* ET
Q
Q
q
1 0 0 1 78 375.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Regarding the licenes for the ) Tj (pyHnj library) Tj ( from Danny Yoo \(HNJ hyphenation, contained in the wordaxe) Tj T* (installation\), for the ) Tj (ReportLab PDF library) Tj ( and the ) Tj (pyhyphen library) Tj ( please visit the corresponding web sites.) Tj T* ET
Q
Q
q
1 0 0 1 78 345.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The dictionary files with the suffix ) Tj (.dic) Tj ( have been taken from the OpenOffice distribution, they are licences) Tj T* (under the GNU LGPL.) Tj T* ET
Q
Q
q
1 0 0 1 78 315.8898 cm
q
BT 1 0 0 1 0 8.536 Tm 18 TL /F2 14 Tf 0 0 0 rg (Installation) Tj T* ET
Q
Q
q
1 0 0 1 78 289.8898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (ReportLab 2.1 or 2.2) Tj T* ET
Q
Q
q
1 0 0 1 78 259.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (wordaxe Release 0.3.0 has been tested with Python 2.5 and ReportLab 2.2, but it should work equally well) Tj T* (with Python 2.4, since AFAIK none of the new features of 2.5 are used.) Tj T* ET
Q
Q
q
1 0 0 1 78 229.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (ReportLab 2.2 can be obtained from ) Tj (www.reportlab.org) Tj (. The installation is easy \(though not with easy-install) Tj T* (;-\) and is not described here.) Tj T* ET
Q
Q
q
1 0 0 1 78 211.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (wordaxe works with ReportLab 2.1, too.) Tj T* ET
Q
Q
q
1 0 0 1 78 193.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Notes on even older ReportLab versions:) Tj T* ET
Q
Q
q
1 0 0 1 78 151.8898 cm
q
BT 1 0 0 1 0 29.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Though untested, wordaxe Release 0.3.0 may work with ReportLab 2.0. Otherwise you can use 0.2.2 in this) Tj T* (case, but the installation is a little harder \(because some more files in the ReportLab installation had to be) Tj T* (overwritten and the installation guide was not correct\).) Tj T* ET
Q
Q
q
1 0 0 1 78 109.8898 cm
q
BT 1 0 0 1 0 29.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (For ReportLab 1.19 please use Release 0.1.1 \(not recommended\). When upgrading from ReportLab 1.x to 2.x) Tj T* (you probably have to change existing code \(independently from wordaxe\), since for 2.x all paragraph input) Tj T* (text has to be unicode or UTF8 encoded.) Tj T* ET
Q
Q
q
1 0 0 1 78 83.88976 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (Installating wordaxe step-by-step) Tj T* ET
Q
Q
 
endstream

endobj
26 0 obj
<< /Length 5218 >>
stream
1 0 0 1 0 0 cm BT /F1 12 Tf 14.4 TL ET
q
BT /F3 9 Tf 10.8 TL ET
BT 1 0 0 1 72 54 Tm (Seite 2) Tj T* ET
Q
q
1 0 0 1 78 751.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (1. Download the ZIP archive wordaxe-0.3.0.zip from the SourceForge site.) Tj T* ET
Q
Q
q
1 0 0 1 78 721.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (2. Unpack the ZIP-archive wordaxe-0.3.0.zip in the root directory C:\\ \(inside the archive, all files are in a) Tj T* (directory "wordaxe-0.3.0"\).) Tj T* ET
Q
Q
q
1 0 0 1 78 703.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The following directory structure will be created:) Tj T* ET
Q
Q
q
1 0 0 1 78 598.2898 cm
q
0 0 0 rg
BT 1 0 0 1 36 100.568 Tm /F5 8 Tf 8.8 TL (C:) Tj T* (    wordaxe-0.3.0) Tj T* (        doc) Tj T* (        htdocs) Tj T* (            css) Tj T* (            examples) Tj T* (            icons) Tj T* (            images) Tj T* (        wordaxe) Tj T* (            dict) Tj T* (            plugins) Tj T* (            rl) Tj T* ET
Q
Q
q
1 0 0 1 78 580.2898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (3a. On the command line, execute:) Tj T* ET
Q
Q
q
1 0 0 1 78 562.6898 cm
q
0 0 0 rg
BT 1 0 0 1 36 12.568 Tm /F5 8 Tf 8.8 TL (cd /d c:\\wordaxe-0.3.0) Tj T* (setup.py install) Tj T* ET
Q
Q
q
1 0 0 1 78 544.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (3b. Alternative:) Tj T* ET
Q
Q
q
1 0 0 1 78 514.6898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Make a backup copy of the file reportlab\\pdfbase\\rl_codecs.py from the ReportLab Installation; then replace) Tj T* (the file with the modified version from c:\\wordaxe-0.3.0\\wordaxe\\rl\\rl_codecs.py.) Tj T* ET
Q
Q
q
1 0 0 1 78 496.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F6 10 Tf 0 0 0 rg (Note:) Tj /F3 10 Tf ( This will only change two lines of code in the file, responsible for the "shy hyphen" character SHY.) Tj T* ET
Q
Q
q
1 0 0 1 78 466.6898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Add the new library to the Python path, for example by creating a file wordaxe.pth in c:\\python25\\lib\\site-) Tj T* (packages, containg only one text line:) Tj T* ET
Q
Q
q
1 0 0 1 78 457.8898 cm
q
0 0 0 rg
BT 1 0 0 1 36 3.768 Tm /F5 8 Tf 8.8 TL (c:\\wordaxe-0.3.0) Tj T* ET
Q
Q
q
1 0 0 1 78 439.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (4. Assure that "import wordaxe" doesn't create an error message.) Tj T* ET
Q
Q
q
1 0 0 1 78 409.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (5. ReportLab will work as before; differences may only occur, if ) Tj /F6 10 Tf (your own) Tj /F3 10 Tf ( programs or texts use the SHY-) Tj T* (character.) Tj T* ET
Q
Q
q
1 0 0 1 78 379.8898 cm
q
BT 1 0 0 1 0 8.536 Tm 18 TL /F2 14 Tf 0 0 0 rg (Usage) Tj T* ET
Q
Q
q
1 0 0 1 78 337.8898 cm
q
BT 1 0 0 1 0 29.17 Tm -0.365315 Tw 12 TL /F3 10 Tf 0 0 0 rg (To see the hyphenation with the DCW-Algorithmus \(Decomposition of compound words\) in action for german) Tj T* 0 Tw (language text, run the example script "test_hyphenation.py" in the test subdirectory. It will produce two PDF) Tj T* (files, test_hyphenation-plain.pdf and test_hyphenation_styled.pdf.) Tj T* ET
Q
Q
q
1 0 0 1 78 319.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The document you read now has also be produced with automatic hyphenation \(see the buildDoku.py script\).) Tj T* ET
Q
Q
q
1 0 0 1 78 289.8898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (To add hyphenation support to your own programs \(here using the DCW algorithm as an example\), only very) Tj T* (few modifications in your code are necessary:) Tj T* ET
Q
Q
q
1 0 0 1 78 271.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Add the following lines:) Tj T* ET
Q
Q
q
1 0 0 1 78 245.4898 cm
q
0 0 0 rg
BT 1 0 0 1 36 21.368 Tm /F5 8 Tf 8.8 TL (from wordaxe import hyphRegistry) Tj T* (from wordaxe.DCWHyphenator import DCWHyphenator) Tj T* (hyphRegistry['DE'] = DCWHyphenator\('de',5\)) Tj T* ET
Q
Q
q
1 0 0 1 78 227.4898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Search and replace the following strings:) Tj T* ET
Q
Q
q
1 0 0 1 78 192.2898 cm
q
0 0 0 rg
BT 1 0 0 1 36 30.168 Tm /F5 8 Tf 8.8 TL (Search                            Replace with) Tj T* (reportlab.platypus.paragraph      wordaxe.rl.paragraph) Tj T* (reportlab.platypus.xpreformatted  wordaxe.rl.xpreformatted) Tj T* (reportlab.lib.styles              wordaxe.rl.styles) Tj T* ET
Q
Q
q
1 0 0 1 78 174.2898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Enable hyphenation. To do this, set two attributes in your ParagraphStyle:) Tj T* ET
Q
Q
q
1 0 0 1 78 139.0898 cm
q
0 0 0 rg
BT 1 0 0 1 36 30.168 Tm /F5 8 Tf 8.8 TL (stylesheet = getSampleStyleSheet\(\)) Tj T* (myStyle = stylesheet["BodyText"]) Tj T* (myStyle.language = 'DE') Tj T* (myStyle.hyphenation = True) Tj T* ET
Q
Q
q
1 0 0 1 78 113.0898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (Using a Hyphenator) Tj T* ET
Q
Q
q
1 0 0 1 78 95.08976 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Of course the wordaxe hyphenation can be used independent from ReportLab.) Tj T* ET
Q
Q
 
endstream

endobj
27 0 obj
<< /Length 5928 >>
stream
1 0 0 1 0 0 cm BT /F1 12 Tf 14.4 TL ET
q
BT /F3 9 Tf 10.8 TL ET
BT 1 0 0 1 72 54 Tm (Seite 3) Tj T* ET
Q
q
1 0 0 1 78 739.8898 cm
q
BT 1 0 0 1 0 17.17 Tm -0.098023 Tw 12 TL /F3 10 Tf 0 0 0 rg (In the constructor, at least a language code and a minimal word-length have to be supplied. Shorter words will) Tj T* 0 Tw (not be considered for hyphenation.) Tj T* ET
Q
Q
q
1 0 0 1 78 722.2898 cm
q
0 0 0 rg
BT 1 0 0 1 36 12.568 Tm /F5 8 Tf 8.8 TL (from wordaxe.DCWHyphenator import DCWHyphenator) Tj T* (hyphenator = DCWHyphenator\('de',5\)) Tj T* ET
Q
Q
q
1 0 0 1 78 692.2898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Now you can hyphenate \(unicode\) words. The return value will either be None \(unknown word\) or a) Tj T* (HyphenatedWord, that is, a word with hyphenation points and their quality.) Tj T* ET
Q
Q
q
1 0 0 1 78 595.4898 cm
q
0 0 0 rg
BT 1 0 0 1 36 91.768 Tm /F5 8 Tf 8.8 TL (hword = hyphenator.hyphenate\(u"Donaudampfschiffahrt"\)) Tj T* (print "Possible hyphenations", hword.hyphenations) Tj T* (# Split the word at the second possible hyphenation point:) Tj T* (left,right = hword.split\(hword.hyphenations[1]\)) Tj T* (# returns: \(u'Donau\\xad', HyphenatedWord\(u'dampfschiffahrt'\)\)) Tj T* (# The left part is a unicode object \(here: Donau-\),) Tj T* (# the right part is the rest of the word \(a HyphenatedWord instance again\),) Tj T* (# that should go into the next line.) Tj T* (print left) Tj T* (print right) Tj T* (print right.hyphenations) Tj T* ET
Q
Q
q
1 0 0 1 78 565.4898 cm
q
BT 1 0 0 1 0 8.536 Tm 18 TL /F2 14 Tf 0 0 0 rg (Hyphenation Classes) Tj T* ET
Q
Q
q
1 0 0 1 78 523.4898 cm
q
BT 1 0 0 1 0 29.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The source code for the classes contains test code that you can examine to find out how to use the class. The) Tj T* (test code can be called to see how the corresponding class handles the words given on the command line.) Tj T* (Probably you want to supply the -v argument for verbose output, too.) Tj T* ET
Q
Q
q
1 0 0 1 78 505.4898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Example) Tj T* ET
Q
Q
q
1 0 0 1 78 496.6898 cm
q
0 0 0 rg
BT 1 0 0 1 36 3.768 Tm /F5 8 Tf 8.8 TL (c:\\python25\\python wordaxe\\DCWHyphenator.py -v Silbentrennung) Tj T* ET
Q
Q
q
1 0 0 1 78 470.6898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (DCWHyphenator) Tj T* ET
Q
Q
q
1 0 0 1 78 440.6898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (This class works by splitting compound words into subwords, inspired by the publications of the TU Vienna,) Tj T* (see ) Tj (http://www.ads.tuwien.ac.at/research/SiSiSi/) Tj (.) Tj T* ET
Q
Q
q
1 0 0 1 78 422.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (However, the implementation here isn't in any way related to the closed source product "SiSiSi".) Tj T* ET
Q
Q
q
1 0 0 1 78 380.6898 cm
q
BT 1 0 0 1 0 29.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The algorithm works as follows: A given compound word will be decomposed into subwords first, using the) Tj T* (file DE_hyph.ini, which contains stems, some of them annotated with properties like NEED_SUFFIX, NO_\255) Tj T* (SUFFIX etc. Furthermore, possible prefixes and suffixes are defined there.) Tj T* ET
Q
Q
q
1 0 0 1 78 362.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Due to its complexity, the algorithm is quite slow:) Tj T* ET
Q
Q
q
1 0 0 1 78 296.6898 cm
q
BT 1 0 0 1 0 53.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The word will be scanned from left to right. It will be split into a pair \(L,R\), where different partitions are of) Tj T* (possible of course, for example "Trennung": \("T", "rennung"\), \("Tr", "ennung"\), \("Tre", "nnung"\), and so on.) Tj T* (For each pair, the algorithm checks if the left part matches a know prefix, stem or suffix from the file DE_\255) Tj T* -0.199026 Tw (hyph.ini. If yes, the algorithm R continues with the remainder R analogously. Otherwise, or if the combination) Tj T* 0 Tw (does not make sense \(i.e. prefix + suffix without stem\) the algorithm cancels.) Tj T* ET
Q
Q
q
1 0 0 1 78 278.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (In principle, this is a recursive algorithm, although the implementation uses a to-do like list instead.) Tj T* ET
Q
Q
q
1 0 0 1 78 260.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The properties of the algorithm are:) Tj T* ET
Q
Q
q
1 0 0 1 78 242.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Only the stems defined in DE_hyph.ini will be detected.) Tj T* ET
Q
Q
q
1 0 0 1 78 212.6898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (As a consequence, possible some valid hyphenation points may be missed, because unknown words will not) Tj T* (be hyphenated at all.) Tj T* ET
Q
Q
q
1 0 0 1 78 194.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (On the other hand, this prevents wrong hyphenations.) Tj T* ET
Q
Q
q
1 0 0 1 78 164.6898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (If a compound word cannot be decomposed uniquely, only those hyphenation points that exist in all the) Tj T* (decompositions. This prevents hyphenations that may be valid but hard to read.) Tj T* ET
Q
Q
q
1 0 0 1 78 134.6898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Hyphenation points have a priority, which can be used by the calling program to prefer good hyphenation) Tj T* (points \(at subword boundaries\).) Tj T* ET
Q
Q
q
1 0 0 1 78 108.6898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (ExplicitHyphenator) Tj T* ET
Q
Q
q
1 0 0 1 78 78.68976 cm
q
BT 1 0 0 1 0 17.17 Tm -0.19272 Tw 12 TL /F3 10 Tf 0 0 0 rg (Here you have to explicitly define the hyphenation for every word. Thus this class isn't of much use on its own) Tj T* 0 Tw (- only if the dictionary is quite small \(for example if more or less only fixed text templates are used\).) Tj T* ET
Q
Q
 
endstream

endobj
28 0 obj
<< /Length 4062 >>
stream
1 0 0 1 0 0 cm BT /F1 12 Tf 14.4 TL ET
q
BT /F3 9 Tf 10.8 TL ET
BT 1 0 0 1 72 54 Tm (Seite 4) Tj T* ET
Q
q
1 0 0 1 78 749.8898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (PyHnjHyphenator) Tj T* ET
Q
Q
q
1 0 0 1 78 719.8898 cm
q
BT 1 0 0 1 0 17.17 Tm -0.215276 Tw 12 TL /F3 10 Tf 0 0 0 rg (This works like the pattern-based hyphenation in TeX \(see also libhnj, pyhnj\). The implementation can use the) Tj T* 0 Tw (pyhnj C-library or use pure Python, if the argument purePython=True is supplied to the constructor.) Tj T* ET
Q
Q
q
1 0 0 1 78 693.8898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (wordaxe.plugins.PyHyphenHyphenator) Tj T* ET
Q
Q
q
1 0 0 1 78 651.8898 cm
q
BT 1 0 0 1 0 29.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (This class also works like the pattern-based hyphenation in TeX, but it uses a different implementation and) Tj T* /F6 10 Tf (works much better) Tj /F3 10 Tf (! To use it, you need to have the pyhyphen library installed \(see ) Tj (http://pypi.python.\255) Tj T* (org/pypi/PyHyphen/) Tj (\).) Tj T* ET
Q
Q
q
1 0 0 1 78 625.8898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (BaseHyphenator) Tj T* ET
Q
Q
q
1 0 0 1 78 607.8898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (This class should work for all languages. It hyphenates only after the following characters:) Tj T* ET
Q
Q
q
1 0 0 1 78 572.6898 cm
q
0 0 0 rg
BT 1 0 0 1 36 30.168 Tm /F5 8 Tf 8.8 TL (    '-'   minus \(45, '\\x2D'\)) Tj T* (    '.'   dot \(46, '\\x2E'\) \(but not if the dot is between digits\)) Tj T* (    '_'   underscore \(95, '\\x5F'\)) Tj T* (    '\255'   SHY hyphenation character \(173, '\\xAD'\)) Tj T* ET
Q
Q
q
1 0 0 1 78 542.6898 cm
q
BT 1 0 0 1 0 8.536 Tm 18 TL /F2 14 Tf 0 0 0 rg (Remarks) Tj T* ET
Q
Q
q
1 0 0 1 78 516.6898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (Performance) Tj T* ET
Q
Q
q
1 0 0 1 78 498.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The DCWHyphenator is quite slow, due to the rekursive nature of the algorithm.) Tj T* ET
Q
Q
q
1 0 0 1 78 468.6898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Since the word length is bounded, the run time when used with ReportLab is proportional to the number of) Tj T* (lines, because only the last word of each line will be handled by the hyphenator.) Tj T* ET
Q
Q
q
1 0 0 1 78 450.6898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (For the DCWHyphenator you can cache the results instead of using it directly, using the following code:) Tj T* ET
Q
Q
q
1 0 0 1 78 415.4898 cm
q
0 0 0 rg
BT 1 0 0 1 36 30.168 Tm /F5 8 Tf 8.8 TL (import wordaxe) Tj T* (from wordaxe.DCWHyphenator import DCWHyphenator) Tj T* (hyph = DCWHyphenator\("DE"\)) Tj T* (wordaxe.hyphRegistry ["DE"] = wordaxe.Cached\(hyph, 1000\)) Tj T* ET
Q
Q
q
1 0 0 1 78 389.4898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (Extensions) Tj T* ET
Q
Q
q
1 0 0 1 78 371.4898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Other hyphenation libraries can easily integrated with the help of ctypes or SWIG.) Tj T* ET
Q
Q
q
1 0 0 1 78 341.4898 cm
q
BT 1 0 0 1 0 17.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (To do this, you have to override the member function "hyphenate", which receives a Unicode-word as input) Tj T* (and has to return a HyphenatedWord object or None.) Tj T* ET
Q
Q
q
1 0 0 1 78 315.4898 cm
q
BT 1 0 0 1 0 5.612 Tm 14 TL /F4 12 Tf 0 0 0 rg (Notes on ReportLab) Tj T* ET
Q
Q
q
1 0 0 1 78 297.4898 cm
q
BT 1 0 0 1 0 5.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (The code in platypus/paragraph.py is hard to read and therefore it is quite hard to extend the functionality.) Tj T* ET
Q
Q
q
1 0 0 1 78 255.4898 cm
q
BT 1 0 0 1 0 29.17 Tm 12 TL /F3 10 Tf 0 0 0 rg (Since I was not able to add working hyphenation support to that code in case of paragraph splitting, I decided) Tj T* (to start a new Paragraph implementation which a lot of code rewritten from scratch \(NewParagraph.py and) Tj T* (para_fragments.py\) and use that instead.) Tj T* ET
Q
Q
 
endstream

endobj
29 0 obj
<< /Count 0
 /Type /Outlines >>
endobj
xref
0 30
0000000000 65535 f
0000000075 00000 n
0000000172 00000 n
0000000290 00000 n
0000000409 00000 n
0000000529 00000 n
0000000726 00000 n
0000000930 00000 n
0000001163 00000 n
0000001376 00000 n
0000001573 00000 n
0000001780 00000 n
0000001906 00000 n
0000002104 00000 n
0000002408 00000 n
0000002525 00000 n
0000002647 00000 n
0000002881 00000 n
0000003098 00000 n
0000003353 00000 n
0000003564 00000 n
0000003771 00000 n
0000004035 00000 n
0000004131 00000 n
0000004362 00000 n
0000004457 00000 n
0000009626 00000 n
0000014903 00000 n
0000020890 00000 n
0000025011 00000 n
trailer
<< /ID 
 % ReportLab generated PDF document -- digest (http://www.reportlab.com) 
 [(\006\247\010q\311b4\\\012Q\014\2427\364\354\353) (\006\247\010q\311b4\\\012Q\014\2427\364\354\353)] 

 /Info 23 0 R
 /Root 22 0 R
 /Size 30 >>
startxref
25063
%%EOF
